#1
public static int findMin(int[] arr) {
    return findMinRecursive(arr, 0);
}

private static int findMinRecursive(int[] arr, int i) {
    if (i == arr.length - 2)
        return Math.min(arr[i], arr[i + 1]);
    
    int current = arr[i];
    int next = arr[i + 1];
    
    if (current < next) {
        arr[i + 1] = current;
    }
    
    return findMinRecursive(arr, i + 1);
} 


#2

public static float avg(float[] arr) {
    return avg(arr, 0, 0);
}

private static float avg(float[] arr, int i, float sum) {
    if (i == arr.length) {
        return sum / arr.length;
    }
    return avg(arr, i+1, sum + arr[i]);
}


#3


public static boolean isPrime(int n) {
    return isPrime(n, 2);
}

private static boolean isPrime(int n, int i) {
    if (i == n) {
        return true;
    }
    if (n % i == 0) {
        return false;
    }
    return isPrime(n, i + 1);
}


#4

    public static int factorial(int n) {
        if (n == 1) {
            return n;
        }
        return n * factorial(n - 1);
    }
    

#6

    public static int power(int a, int n) {
        if (n <= 1) {
            return a;
        }
        return a * power(a, n - 1);
    }
    
    
#7


public static void permutation(String str) { 
    permutation("", str); 
}

private static void permutation(String prefix, String str) {
    int n = str.length();
    if (n == 0) System.out.println(prefix);
    else {
        for (int i = 0; i < n; i++)
            permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n));
    }
} 


#8

public static boolean allDigitsString(String ex) {
    return checkAllDigits(ex, 0);
}

public static boolean checkAllDigits(String ex, int index) {
    if (index == ex.length()) {
        return true;
    }
    if (!Character.isDigit(ex.charAt(index))) {
        return false;
    }
    return checkAllDigits(ex, index + 1);
}


